import React, { useState, useEffect } from "react";
import { getTransactions, addTransaction } from "../api";
import { useNavigate } from "react-router-dom"; // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º useNavigate –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
import { Pie } from "react-chartjs-2";
import { Chart as ChartJS, ArcElement, Tooltip, Legend } from "chart.js";

// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–ª—è Chart.js
ChartJS.register(ArcElement, Tooltip, Legend);

const Dashboard = () => {
    const [transactions, setTransactions] = useState([]);
    const [categories, setCategories] = useState([]); // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    const [isModalOpen, setIsModalOpen] = useState(false);
    const [newTransaction, setNewTransaction] = useState({
        type: "expense", // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ —Å—Ç–∞–≤–∏–º —Ä–∞—Å—Ö–æ–¥
        amount: "",
        category: "",
        comment: "",
        date: "",
        username: "admin", // –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    });

    const navigate = useNavigate(); // –•—É–∫ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏

    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏–∑ localStorage –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    useEffect(() => {
        const savedTransactions = JSON.parse(localStorage.getItem("transactions")) || []; // –ï—Å–ª–∏ –Ω–µ—Ç, —Ç–æ –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
        setTransactions(savedTransactions);

        const savedCategories = JSON.parse(localStorage.getItem("categories")) || [];
        setCategories(savedCategories);
    }, []);

    const balance = transactions.reduce(
        (acc, tx) => (tx.type === "income" ? acc + tx.amount : acc - tx.amount),
        0
    );

    const incomeTotal = transactions
        .filter((tx) => tx.type === "income")
        .reduce((acc, tx) => acc + tx.amount, 0);

    const expenseTotal = transactions
        .filter((tx) => tx.type === "expense")
        .reduce((acc, tx) => acc + tx.amount, 0);

    const chartData = {
        labels: ["–î–æ—Ö–æ–¥—ã", "–†–∞—Å—Ö–æ–¥—ã"],
        datasets: [
            {
                data: [incomeTotal, expenseTotal], // –î–æ—Ö–æ–¥—ã –∏ —Ä–∞—Å—Ö–æ–¥—ã
                backgroundColor: ["#36A2EB", "#FF6384"], // –¶–≤–µ—Ç–∞ —Å–µ–∫—Ç–æ—Ä–æ–≤
                hoverBackgroundColor: ["#36A2EB", "#FF6384"],
            },
        ],
    };

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    const handleAddTransaction = async (e) => {
        e.preventDefault();
        try {
            const response = await addTransaction(newTransaction); // –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
            const updatedTransactions = [...transactions, response]; // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
            setTransactions(updatedTransactions); // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ localStorage
            localStorage.setItem("transactions", JSON.stringify(updatedTransactions));

            setIsModalOpen(false); // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
            setNewTransaction({
                type: "expense",
                amount: "",
                category: "",
                comment: "",
                date: "",
                username: "admin",
            });
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:", error);
        }
    };

    const handleLogout = () => {
        localStorage.removeItem("token");
        localStorage.removeItem("transactions"); // –û—á–∏—Å—Ç–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏–∑ localStorage
        window.location.href = "/login"; // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ª–æ–≥–∏–Ω–∞
    };

    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ Settings
    const handleGoToSettings = () => {
        navigate("/settings"); // –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –Ω–∞—Å—Ç—Ä–æ–µ–∫
    };

    return (
        <div className="min-h-screen bg-gray-900 text-white p-6">
            <h1 className="text-3xl font-bold mb-6">üí∞ Dashboard</h1>

            <div className="bg-gray-800 p-4 rounded-lg shadow-lg flex justify-between items-center">
                <div>
                    <p className="text-lg">–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å:</p>
                    <p className="text-2xl font-bold text-green-400">${balance.toFixed(2)}</p>
                </div>
                <button
                    className="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-xl transition"
                    onClick={() => setIsModalOpen(true)}
                >
                    ‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
                </button>
                <button
                    className="bg-red-600 hover:bg-red-700 text-white px-4 py-2 rounded-xl transition"
                    onClick={handleLogout} // –ö–Ω–æ–ø–∫–∞ –≤—ã—Ö–æ–¥–∞
                >
                    üö™ –í—ã–π—Ç–∏
                </button>
                {/* –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ */}
                <button
                    className="bg-yellow-600 hover:bg-yellow-700 text-white px-4 py-2 rounded-xl transition"
                    onClick={handleGoToSettings}
                >
                    ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏
                </button>
            </div>

            {isModalOpen && (
                <div className="modal">
                    <div className="modal-content">
                        <h2 className="text-xl font-semibold mb-4">–î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é</h2>
                        <form onSubmit={handleAddTransaction}>
                            <select
                                value={newTransaction.type}
                                onChange={(e) =>
                                    setNewTransaction({ ...newTransaction, type: e.target.value })
                                }
                                className="mb-3"
                            >
                                <option value="expense">–†–∞—Å—Ö–æ–¥</option>
                                <option value="income">–î–æ—Ö–æ–¥</option>
                            </select>

                            <input
                                type="number"
                                placeholder="–°—É–º–º–∞"
                                value={newTransaction.amount}
                                onChange={(e) =>
                                    setNewTransaction({ ...newTransaction, amount: e.target.value })
                                }
                            />
                            {/* –î—Ä–æ–ø–¥–∞—É–Ω –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ */}
                            <select
                                value={newTransaction.category}
                                onChange={(e) =>
                                    setNewTransaction({ ...newTransaction, category: e.target.value })
                                }
                                className="mb-3"
                            >
                                <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é</option>
                                {categories.map((category) => (
                                    <option key={category.id} value={category.name}>
                                        {category.name}
                                    </option>
                                ))}
                            </select>
                            <input
                                type="text"
                                placeholder="–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"
                                value={newTransaction.comment}
                                onChange={(e) =>
                                    setNewTransaction({
                                        ...newTransaction,
                                        comment: e.target.value,
                                    })
                                }
                            />
                            <input
                                type="date"
                                value={newTransaction.date}
                                onChange={(e) =>
                                    setNewTransaction({ ...newTransaction, date: e.target.value })
                                }
                            />
                            <button type="submit">–î–æ–±–∞–≤–∏—Ç—å</button>
                        </form>
                        <button onClick={() => setIsModalOpen(false)}>–ó–∞–∫—Ä—ã—Ç—å</button>
                    </div>
                </div>
            )}

            <div className="mt-8">
                <h2 className="text-xl font-semibold mb-4">–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏</h2>
                {transactions.length === 0 ? (
                    <p>–ù–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π</p>
                ) : (
                    <ul>
                        {transactions.map((tx) => (
                            <li key={tx.id}>
                                {tx.type === "income" ? "+" : "-"} {tx.amount} {tx.category}
                            </li>
                        ))}
                    </ul>
                )}
            </div>

            {/* –ö—Ä—É–≥–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞ */}
            <div className="mt-8">
                <h2 className="text-xl font-semibold mb-4">–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º</h2>
                <Pie data={chartData} />
            </div>
        </div>
    );
};

export default Dashboard;
